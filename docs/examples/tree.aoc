BTreeSet = fn() {
    self = {=}
    self.value = nil
    self.left = nil
    self.right = nil
    self.all = fn() {
        if self.value == nil {
            return []
        }
        self.left.all() + [self.value] + self.right.all()
    }
    self.insert = fn(value) {
        if self.value == nil {
            self.value = value
            self.left = BTreeSet()
            self.right = BTreeSet()
            1
        } else if value == self.value {
            0
        } else if value < self.value {
            self.left.insert(value)
        } else {
            self.right.insert(value)
        }
    }
    self.has = fn(value) {
        if self.value == nil {
            0
        } else if value == self.value {
            1
        } else if value < self.value {
            self.left.has(value)
        } else {
            self.right.has(value)
        }
    }
    self.remove = fn(value) {
        if self.value == nil {
            0
        } else if value == self.value {
            self._delete()
            1
        } else if value < self.value {
            self.left.remove(value)
        } else {
            self.right.remove(value)
        }
    }
    self.pop_min = fn() {
        if self.left.value != nil {
            return self.left.pop_min()
        }
        # This is the smallest value in the tree
        value = self.value
        self._delete()
        value
    }
    self._delete = fn() {
        if self.left.value == nil && self.right.value == nil {
            # Nothing useful in either of the leaves, so just clear this node
            self.value = nil
            self.left = nil
            self.right = nil
        } else if self.left.value == nil {
            # The left child is nil, so we just replece this node with the right child
            self.value = self.right.value
            self.left = self.right.left
            self.right = self.right.right
        } else if self.right.value == nil {
            # The right child is nil, so we just replece this node with the left child
            self.value = self.left.value
            self.right = self.left.right
            self.left = self.left.left
        } else {
            # Both children are non-nil. Take the smallest value from the right child.
            self.value = self.right.pop_min()
        }
    }
    self
}

set = BTreeSet()
set.insert(1)
set.insert(5)
set.insert(2)
set.insert(-2)
set.insert(-1)
set.insert(0)
print(set.all())
if set.has(1) {
    print("1 is in the set")
}
if !set.has(10) {
    print("10 is not in the set")
}
set.remove(1)
if !set.has(1) {
    print("1 is no longer in the set")
}